{
  "name": "load-data-on-demand-devextreme-tree-list-forked",
  "description": "The TreeList can load a remote dataset dynamically as a user expands nodes. The dataset must have a plain structure.\nThis feature requires client- and server-side configurations. To configure the client-side part, do the following:\n\n\nSend an expanded node's ID to the server\nFor this, implement the CustomStore's load function. In this demo, we do it in the dataSource configuration object.\n\n\nDelegate filtering to the server\nSet the remoteOperations.filtering property to true.\n\n\nSpecify the data field that defines whether the node has children\nUse the hasItemsExpr property to set this data field.\n\n\nServer-side implementation is available in the ASP.NET Core and ASP.NET MVC versions of this demo under the TreeListDataController.cs tab.\n",
  "dependencies": {
    "whatwg-fetch": "2.0.4",
    "rrule": "2.6.6",
    "react-dom": "17.0.2",
    "react": "17.0.2",
    "prop-types": "15.7.2",
    "luxon": "1.27.0",
    "jszip": "3.6.0",
    "inferno-hydrate": "7.4.8",
    "inferno-extras": "7.4.8",
    "inferno-dom": "1.0.7",
    "inferno-create-element": "7.4.8",
    "inferno-create-class": "7.4.8",
    "inferno-compat": "7.4.8",
    "inferno-clone-vnode": "7.4.8",
    "inferno": "7.4.8",
    "es6-object-assign": "1.1.0",
    "devextreme-react": "21.1.3",
    "devextreme-quill": "1.0.0",
    "devextreme": "21.1.3",
    "devexpress-gantt": "2.1.31",
    "devexpress-diagram": "2.1.15",
    "@devextreme/vdom": "1.2.1"
  },
  "version": "0.0.0",
  "devDependencies": {
    "react-scripts": "1.0.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  }
}